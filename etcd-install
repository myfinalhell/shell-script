#!/bin/bash

#version: v3.4.13
set -e



systemctl status etcd &> /dev/null
[[ $? == 0 ]] && echo "etcd is already installed, exit 1" && exit 1;

[[ $# != 2 ]] && echo "input arg1 arg2,arg1=this host's ip, arg2=etcd version" && exit 2;

IPADDR=$1
VERSION=$2


##system modify##

modprobe br_netfilter

cat /etc/sysctl.conf | fgrep "net.ipv4.ip_forward = 1" &> /dev/null

if [[ $? != 0 ]]; then
  echo '
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
  ' >> /etc/sysctl.conf
fi


#

cat /etc/security/limits.conf | fgrep "* hard    nproc   65535" &> /dev/null

if [[ $? != 0 ]]; then
  echo '
* hard    nproc   65535
* soft    nproc   65535
* hard    nofile  65535
* soft    nofile  65535
' >> /etc/security/limits.conf
fi
ulimit -n 65535

#

cat /etc/sysctl.conf | fgrep "fs.file-max = 2000000" &> /dev/null

if [[ $? != 0 ]]; then
  echo '
fs.file-max = 2000000
' >> /etc/sysctl.conf
fi

sysctl -p

##system modify end##

##install and import##
curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo

yum clean all
yum makecache
curl -L https://github.com/etcd-io/etcd/releases/download/${VERSION}/etcd-${VERSION}-linux-amd64.tar.gz -o /tmp/etcd-${VERSION}-linux-amd64.tar.gz
mkdir -p /tmp/etcd
tar -zxvf /tmp/etcd-${VERSION}-linux-amd64.tar.gz -C /tmp/etcd --strip-components=1

##TLS cert##

#Generate self-signed root CA certificate
rm -f /tmp/cfssl* && rm -rf /tmp/certs && mkdir -p /tmp/certs
curl -L https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -o /tmp/cfssl
chmod +x /tmp/cfssl
mv /tmp/cfssl /usr/local/bin/cfssl
curl -L https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -o /tmp/cfssljson
chmod +x /tmp/cfssljson
mv /tmp/cfssljson /usr/local/bin/cfssljson

#mkdir -p /tmp/certs

cat > /tmp/certs/etcd-root-ca-csr.json <<EOF
{
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "O": "etcd",
      "OU": "etcd Security",
      "L": "Wuhan",
      "ST": "Hubei",
      "C": "CHINA"
    }
  ],
  "CN": "etcd-root-ca"
}
EOF
cfssl gencert --initca=true /tmp/certs/etcd-root-ca-csr.json | cfssljson --bare /tmp/certs/etcd-root-ca

# verify
openssl x509 -in /tmp/certs/etcd-root-ca.pem -text -noout


# cert-generation configuration
cat > /tmp/certs/etcd-gencert.json <<EOF
{
  "signing": {
    "default": {
        "usages": [
          "signing",
          "key encipherment",
          "server auth",
          "client auth"
        ],
        "expiry": "87600h"
    }
  }
}
EOF

#Generate local-issued certificates with private keys

cat > /tmp/certs/s1-ca-csr.json <<EOF
{
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "O": "etcd",
      "OU": "etcd Security",
      "L": "Wuhan",
      "ST": "Hubei",
      "C": "CHINA"
    }
  ],
  "CN": "s1",
  "hosts": [
    "127.0.0.1",
    "localhost",
    "${IPADDR}"
  ]
}
EOF
cfssl gencert \
  --ca /tmp/certs/etcd-root-ca.pem \
  --ca-key /tmp/certs/etcd-root-ca-key.pem \
  --config /tmp/certs/etcd-gencert.json \
  /tmp/certs/s1-ca-csr.json | cfssljson --bare /tmp/certs/s1

# verify
openssl x509 -in /tmp/certs/s1.pem -text -noout

##TLS cert end#

##
# after transferring certs to remote machines
mkdir -p ${HOME}/certs
cp /tmp/certs/* ${HOME}/certs


# make sure etcd process has write access to this directory
# remove this directory if the cluster is new; keep if restarting etcd
# rm -rf /tmp/etcd/s1


# to write service file for etcd
cat > /tmp/etcd.service <<EOF
[Unit]
Description=etcd
Documentation=https://github.com/coreos/etcd
Conflicts=etcd.service
Conflicts=etcd2.service

[Service]
Type=notify
Restart=always
RestartSec=5s
LimitNOFILE=40000
TimeoutStartSec=0

ExecStart=/tmp/etcd/etcd --name s1 \
  --data-dir /tmp/etcd/s1 \
  --listen-client-urls https://${IPADDR}:2379 \
  --advertise-client-urls https://${IPADDR}:2379 \
  --listen-peer-urls https://${IPADDR}:2380 \
  --initial-advertise-peer-urls https://${IPADDR}:2380 \
  --initial-cluster s1=https://${IPADDR}:2380 \
  --initial-cluster-token tkn \
  --initial-cluster-state new \
  --client-cert-auth \
  --trusted-ca-file ${HOME}/certs/etcd-root-ca.pem \
  --cert-file ${HOME}/certs/s1.pem \
  --key-file ${HOME}/certs/s1-key.pem \
  --peer-client-cert-auth \
  --peer-trusted-ca-file ${HOME}/certs/etcd-root-ca.pem \
  --peer-cert-file ${HOME}/certs/s1.pem \
  --peer-key-file ${HOME}/certs/s1-key.pem

[Install]
WantedBy=multi-user.target
EOF
mv /tmp/etcd.service /etc/systemd/system/etcd.service



# to start service
systemctl daemon-reload
#systemctl cat etcd.service
systemctl enable etcd.service
systemctl restart etcd.service

# to get logs from service
systemctl status etcd.service -l
#journalctl -u etcd.service -l --no-pager|less
#journalctl -f -u etcd.service

# to stop service
#systemctl stop etcd.service
#systemctl disable etcd.service

##


##install and import end##
